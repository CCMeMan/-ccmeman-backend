// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

// Reference: many-to-many relations
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations

// ================================================================
// ============================ Models ============================
// ================================================================

// Users
model User {
    id              Int               @id @default(autoincrement())
    userIdFromAuth0 String            @unique
    name            String?
    email           String?
    systemRole      SystemRole        @default(USER)
    groups          UsersOnGroups[]
    meetings        UsersOnMeetings[]
}

// Groups
model Group {
    id       Int             @id @default(autoincrement())
    sUUID    String          @unique
    name     String
    users    UsersOnGroups[]
    meetings Meeting[]
}

model UsersOnGroups {
    group   Group  @relation(fields: [groupId], references: [id])
    groupId Int
    user    User   @relation(fields: [userId], references: [id])
    userId  Int
    role    Role[] @default([GUEST])

    @@id([groupId, userId])
}

// Projects

// Meetings
model Meeting {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    sUUID   String @unique
    name    String
    group   Group  @relation(fields: [groupId], references: [id])
    groupId Int

    users   UsersOnMeetings[]
    time    DateTime          @default(now()) @db.Timestamptz()
    roomURL String?
    links   Link[]
    info    String?
}

model UsersOnMeetings {
    meeting     Meeting @relation(fields: [meetingId], references: [id])
    meetingId   Int
    user        User    @relation(fields: [userId], references: [id])
    userId      Int
    role        Role[]  @default([GUEST])
    publicEmail String

    @@id([meetingId, userId])
}

// Links
model Link {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    meeting   Meeting  @relation(fields: [meetingId], references: [id])
    meetingId Int

    name String?
    URL  String?
}

// Roles
enum Role {
    MANAGER
    MEMBER
    GUEST
}

enum SystemRole {
    USER
    ADMIN
}
